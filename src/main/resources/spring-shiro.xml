<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
">

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"></property>
        <property name="loginUrl" value="/user/toLogin"></property><!--没有登录认证的用户默认跳转的登录界面，默认是根目录下的/login.jsp界面-->
        <property name="unauthorizedUrl" value="/403.jsp"></property><!--没有权限默认跳转的界面-->
        <property name="filterChainDefinitions">
            <value><!-- 优先级自上到下 --><!-- anon:表示可以匿名使用。 authc:表示需要认证(登录)才能使用，没有参数. -->
                /user/toRegister anon
                /user/register anon
                /user/toLogin anon
                /user/login anon
                /403.jsp anon
                /user/logout anon
                <!--/userManage roles["1","2"] &lt;!&ndash;同时拥有多个角色才可以&ndash;&gt;-->
                <!--/orderManage customFilter["1","3"]  &lt;!&ndash;自定义filter,拥有其中一个角色就能访问&ndash;&gt;-->
                <!--/userDel perms["1","2"]-->
                <!--/orderDel = perms["1","3"] &lt;!&ndash;权限控制（多个）&ndash;&gt;-->
                /** authc,customFilter
            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="customFilter" value-ref="customShiroFilter"></entry>
            </map>
        </property>
    </bean>

    <!--自定义权限过滤器-->
    <bean id="customShiroFilter" class="com.huangtl.filter.CustomShiroFilter"></bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"></property>
        <!--缓存管理器可以配置在securityManager，也可以配置在自定义realm，配置在securityManager本质上也会赋给realm-->
        <!--<property name="cacheManager" value=""></property>-->
    </bean>

    <bean id="customRealm" class="com.huangtl.realm.CustomRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"></property>
        <property name="cacheManager" ref="cacheManager"></property>
    </bean>

    <!--认证匹配器，将请求的密码进行加密-->
    <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher" id="credentialsMatcher">
        <!--使用的加密算法-->
        <property name="hashAlgorithmName" value="md5"></property>
        <!--反复加密次数-->
        <property name="hashIterations" value="1"></property>
    </bean>

    <!--角色权限缓存-->
    <bean class="com.huangtl.cache.RedisCacheManager" id="cacheManager"></bean>

    <!-- 保证 Shiro内部生命周期 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after ,启用shiro注解（@RequiresRoles, @RequiresPermissions）-->
    <!-- the lifecycleBeanProcessor has run: -->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->

    <!-- 开启Shiro授权生效 -->
    <bean id="authorizationAdvisor"
          class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"></bean>


</beans>